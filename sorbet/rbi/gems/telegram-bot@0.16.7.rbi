# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `telegram-bot` gem.
# Please instead update this file by running `bin/tapioca gem telegram-bot`.


# source://telegram-bot//lib/telegram/bot/config_methods.rb#6
module Telegram
  extend ::Telegram::Bot::ConfigMethods
end

# source://telegram-bot//lib/telegram/bot/config_methods.rb#7
module Telegram::Bot
  class << self
    # source://telegram-bot//lib/telegram/bot/version.rb#7
    def gem_version; end
  end
end

# Telegram clients can perform requests in async way with
# any job adapter (ActiveJob by default). Using Rails you don't need any
# additional configuration. However you may want to enable async requests
# by default with `async: true` in `secrets.yml`.
#
#   telegram:
#     bots:
#       chat_async:
#         token: secret
#         async: true # enable async mode for client
#
# Without Rails To start using async requests
# initialize client with `id` kwarg and make sure the client is
# accessible via `Teletgram.bots[id]` in job worker. Or just use
# `Telegram.bots_config=` for configuration.
#
# Being in async mode `#request` enqueues job to perform
# http request instead of performing it immediately.
# Async behavior is controlled with `#async=` writer
# and can be enabled/disabled for the block with `#async`:
#
#   client = Telegram::Bot::Client.new(**config, async: true)
#   client.send_message(message)
#   client.async(false) { client.send_message(other_one) }
#
# `#async=` sets global value for all threads,
# while `#async(val, &block)` is thread-safe.
#
# It can be set with custom job class or classname. By default it defines
# job classes inherited from ApplicationJob, which
# can be accessed via `.default_async_job`. You can integrate it with any
# other job provider by defining a class with `.perform_later(bot_id, *args)`
# method. See Async::Job for implemetation.
#
# source://telegram-bot//lib/telegram/bot/async.rb#38
module Telegram::Bot::Async
  # source://telegram-bot//lib/telegram/bot/async.rb#116
  def initialize(*_arg0, id: T.unsafe(nil), async: T.unsafe(nil), **options); end

  # Sets async value in a thread-safe way for the block.
  # Uses `self.class.prepare_async_val` to prepare value.
  #
  # If no block is given returns previously set value or the global one,
  # set by #async=.
  #
  # source://telegram-bot//lib/telegram/bot/async.rb#133
  def async(val = T.unsafe(nil)); end

  # Sets default async value for all threads.
  # Uses `self.class.prepare_async_val` to prepare value.
  #
  # source://telegram-bot//lib/telegram/bot/async.rb#124
  def async=(val); end

  # Returns the value of attribute id.
  #
  # source://telegram-bot//lib/telegram/bot/async.rb#114
  def id; end

  # Uses job if #async is set.
  #
  # source://telegram-bot//lib/telegram/bot/async.rb#151
  def request(*args); end

  class << self
    # Transforms symbols to strings in hash values.
    #
    # source://telegram-bot//lib/telegram/bot/async.rb#102
    def prepare_hash(hash); end

    # source://telegram-bot//lib/telegram/bot/async.rb#97
    def prepended(base); end

    # Thread-local hash to store async config for every client.
    #
    # source://telegram-bot//lib/telegram/bot/async.rb#109
    def thread_store; end
  end
end

# source://telegram-bot//lib/telegram/bot/async.rb#55
module Telegram::Bot::Async::ClassMethods
  # source://telegram-bot//lib/telegram/bot/async.rb#56
  def default_async_job; end

  # This is used in specs.
  #
  # source://telegram-bot//lib/telegram/bot/async.rb#70
  def default_async_job=(val); end

  # Prepares argments for async job. ActiveJob doesn't support
  # Symbol in argumens. Also we can encode json bodies only once here,
  # so it would not be unnecessarily serialized-deserialized.
  #
  # This is stub method, which returns input. Every client class
  # must prepare args itself.
  #
  # source://telegram-bot//lib/telegram/bot/async.rb#81
  def prepare_async_args(*args); end

  # Returns default_async_job if `true` is given,
  # treats String as a constant name, or bypasses any other values.
  #
  # source://telegram-bot//lib/telegram/bot/async.rb#87
  def prepare_async_val(val); end
end

# source://telegram-bot//lib/telegram/bot/async.rb#42
module Telegram::Bot::Async::Job
  # source://telegram-bot//lib/telegram/bot/async.rb#49
  def perform(client_id, *args); end

  class << self
    # @private
    #
    # source://telegram-bot//lib/telegram/bot/async.rb#44
    def included(base); end
  end
end

# Used to track missing key in a hash in local variable.
#
# source://telegram-bot//lib/telegram/bot/async.rb#40
Telegram::Bot::Async::MISSING_VALUE = T.let(T.unsafe(nil), Object)

# source://telegram-bot//lib/telegram/bot/client.rb#8
class Telegram::Bot::Client
  include ::Telegram::Bot::Async
  include ::Telegram::Bot::DebugClient
  include ::Telegram::Bot::Client::ApiHelper
  extend ::Telegram::Bot::Async::ClassMethods

  # @return [Client] a new instance of Client
  #
  # source://telegram-bot//lib/telegram/bot/client.rb#60
  def initialize(*_arg0, id: T.unsafe(nil), async: T.unsafe(nil), **options); end

  # Returns the value of attribute base_uri.
  #
  # source://telegram-bot//lib/telegram/bot/client.rb#58
  def base_uri; end

  # Returns the value of attribute client.
  #
  # source://telegram-bot//lib/telegram/bot/client.rb#58
  def client; end

  # Endpoint for low-level request. For easy host highjacking & instrumentation.
  # Params are not used directly but kept for instrumentation purpose.
  # You probably don't want to use this method directly.
  #
  # source://telegram-bot//lib/telegram/bot/client.rb#76
  def http_request(uri, body); end

  # source://telegram-bot//lib/telegram/bot/client.rb#80
  def inspect; end

  # source://telegram-bot//lib/telegram/bot/client.rb#67
  def request(*args); end

  # Returns the value of attribute token.
  #
  # source://telegram-bot//lib/telegram/bot/client.rb#58
  def token; end

  # Returns the value of attribute username.
  #
  # source://telegram-bot//lib/telegram/bot/client.rb#58
  def username; end

  class << self
    # source://telegram-bot//lib/telegram/bot/client.rb#32
    def by_id(id); end

    # source://telegram-bot//lib/telegram/bot/client.rb#45
    def error_for_response(response); end

    # source://telegram-bot//lib/telegram/bot/client.rb#41
    def prepare_async_args(action, body = T.unsafe(nil)); end

    # Prepend TypedResponse module.
    #
    # source://telegram-bot//lib/telegram/bot/client.rb#37
    def typed_response!; end

    # Accepts different options to initialize bot.
    #
    # source://telegram-bot//lib/telegram/bot/client.rb#23
    def wrap(input, **options); end
  end
end

# source://telegram-bot//lib/telegram/bot/client/api_helper.rb#8
module Telegram::Bot::Client::ApiHelper
  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def add_sticker_to_set(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def answer_callback_query(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def answer_inline_query(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def answer_pre_checkout_query(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def answer_shipping_query(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def answer_web_app_query(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def approve_chat_join_request(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def ban_chat_member(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def ban_chat_sender_chat(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def close(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def close_forum_topic(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def close_general_forum_topic(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def copy_message(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def copy_messages(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def create_chat_invite_link(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def create_chat_subscription_invite_link(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def create_forum_topic(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def create_invoice_link(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def create_new_sticker_set(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def decline_chat_join_request(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def delete_chat_photo(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def delete_chat_sticker_set(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def delete_forum_topic(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def delete_message(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def delete_messages(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def delete_my_commands(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def delete_sticker_from_set(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def delete_sticker_set(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def delete_webhook(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def edit_chat_invite_link(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def edit_chat_subscription_invite_link(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def edit_forum_topic(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def edit_general_forum_topic(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def edit_message_caption(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def edit_message_live_location(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def edit_message_media(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def edit_message_reply_markup(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def edit_message_text(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def edit_user_star_subscription(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def export_chat_invite_link(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def forward_message(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def forward_messages(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def get_available_gifts(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def get_business_connection(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def get_chat(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def get_chat_administrators(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def get_chat_member(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def get_chat_member_count(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def get_chat_menu_button(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def get_custom_emoji_stickers(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def get_file(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def get_forum_topic_icon_stickers(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def get_game_high_scores(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def get_me(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def get_my_commands(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def get_my_default_administrator_rights(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def get_my_description(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def get_my_name(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def get_my_short_description(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def get_star_transactions(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def get_sticker_set(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def get_updates(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def get_user_chat_boosts(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def get_user_profile_photos(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def get_webhook_info(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def hide_general_forum_topic(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def leave_chat(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def log_out(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def pin_chat_message(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def promote_chat_member(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def refund_star_payment(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def remove_chat_verification(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def remove_user_verification(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def reopen_forum_topic(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def reopen_general_forum_topic(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def replace_sticker_in_set(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def restrict_chat_member(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def revoke_chat_invite_link(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def save_prepared_inline_message(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def send_animation(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def send_audio(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def send_chat_action(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def send_contact(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def send_dice(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def send_document(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def send_game(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def send_gift(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def send_invoice(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def send_location(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def send_media_group(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def send_message(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def send_paid_media(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def send_photo(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def send_poll(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def send_sticker(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def send_venue(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def send_video(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def send_video_note(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def send_voice(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def set_chat_administrator_custom_title(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def set_chat_description(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def set_chat_menu_button(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def set_chat_permissions(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def set_chat_photo(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def set_chat_sticker_set(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def set_chat_title(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def set_custom_emoji_sticker_set_thumbnail(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def set_game_score(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def set_message_reaction(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def set_my_commands(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def set_my_default_administrator_rights(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def set_my_description(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def set_my_name(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def set_my_short_description(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def set_passport_data_errors(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def set_sticker_emoji_list(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def set_sticker_keywords(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def set_sticker_mask_position(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def set_sticker_position_in_set(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def set_sticker_set_thumbnail(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def set_sticker_set_title(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def set_user_emoji_status(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def set_webhook(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def stop_message_live_location(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def stop_poll(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def unban_chat_member(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def unban_chat_sender_chat(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def unhide_general_forum_topic(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def unpin_all_chat_messages(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def unpin_all_forum_topic_messages(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def unpin_all_general_forum_topic_messages(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def unpin_chat_message(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def upload_sticker_file(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def verify_chat(*args); end

  # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#24
  def verify_user(*args); end

  class << self
    # Defines method with underscored name to post to specific endpoint:
    #
    #   define_method :getMe
    #   # defines #get_me
    #
    # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#22
    def define_helpers(*list); end

    # source://telegram-bot//lib/telegram/bot/client/api_helper.rb#12
    def methods_list(file = T.unsafe(nil)); end
  end
end

# source://telegram-bot//lib/telegram/bot/client/api_helper.rb#9
Telegram::Bot::Client::ApiHelper::METHODS_LIST_FILE = T.let(T.unsafe(nil), String)

# Encodes nested hashes and arrays as json and extract File objects from them
# to the top level. Top-level File objects are handled by httpclient.
# More details: https://core.telegram.org/bots/api#sending-files
#
# source://telegram-bot//lib/telegram/bot/client/request_body_formatter.rb#11
module Telegram::Bot::Client::RequestBodyFormatter
  extend ::Telegram::Bot::Client::RequestBodyFormatter

  # source://telegram-bot//lib/telegram/bot/client/request_body_formatter.rb#14
  def format(body, action); end

  private

  # source://telegram-bot//lib/telegram/bot/client/request_body_formatter.rb#38
  def extract_files_from_array!(hash, field_name); end

  # Replace File objects with `attach` URIs. File objects are added into `files` hash.
  #
  # source://telegram-bot//lib/telegram/bot/client/request_body_formatter.rb#48
  def extract_files_from_hash(hash, files); end

  # Detects field by symbol or string name and replaces it with mapped value.
  #
  # source://telegram-bot//lib/telegram/bot/client/request_body_formatter.rb#33
  def replace_field(hash, field_name); end
end

# source://telegram-bot//lib/telegram/bot/client.rb#9
Telegram::Bot::Client::SERVER = T.let(T.unsafe(nil), String)

# source://telegram-bot//lib/telegram/bot/client.rb#10
Telegram::Bot::Client::URL_TEMPLATE = T.let(T.unsafe(nil), String)

# Stubbed client for tests. Saves all requests into #requests hash.
#
# source://telegram-bot//lib/telegram/bot/client_stub.rb#6
class Telegram::Bot::ClientStub < ::Telegram::Bot::Client
  # @return [ClientStub] a new instance of ClientStub
  #
  # source://telegram-bot//lib/telegram/bot/client_stub.rb#39
  def initialize(token = T.unsafe(nil), username = T.unsafe(nil), **options); end

  # source://telegram-bot//lib/telegram/bot/client_stub.rb#49
  def request(action, body = T.unsafe(nil)); end

  # Returns the value of attribute requests.
  #
  # source://telegram-bot//lib/telegram/bot/client_stub.rb#7
  def requests; end

  # source://telegram-bot//lib/telegram/bot/client_stub.rb#45
  def reset; end

  class << self
    # Any call to Client.new will return ClientStub instance when `enabled` is true.
    # Can be used with a block.
    #
    # source://telegram-bot//lib/telegram/bot/client_stub.rb#22
    def stub_all!(enabled = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://telegram-bot//lib/telegram/bot/client_stub.rb#34
    def stub_all?; end
  end
end

# source://telegram-bot//lib/telegram/bot/client_stub.rb#9
module Telegram::Bot::ClientStub::StubbedConstructor
  # source://telegram-bot//lib/telegram/bot/client_stub.rb#10
  def new(*args, **kwargs); end
end

# source://telegram-bot//lib/telegram/bot/config_methods.rb#8
module Telegram::Bot::ConfigMethods
  # Default bot.
  #
  # source://telegram-bot//lib/telegram/bot/config_methods.rb#37
  def bot; end

  # Keep this setting here, so we can avoid loading Bot::UpdatesPoller
  # when polling is disabled.
  #
  # source://telegram-bot//lib/telegram/bot/config_methods.rb#14
  def bot_poller_mode=(_arg0); end

  # It just tells routes helpers whether to add routed bots to
  # Bot::UpdatesPoller, so their config will be available by bot key in
  # Bot::UpdatesPoller.start.
  #
  # It's enabled by default in Rails dev environment and `rake telegram:bot:poller`
  # task. Use `BOT_POLLER_MODE=true` envvar to set it manually.
  #
  # @return [Boolean]
  #
  # source://telegram-bot//lib/telegram/bot/config_methods.rb#22
  def bot_poller_mode?; end

  # Hash of bots made with bots_config.
  #
  # source://telegram-bot//lib/telegram/bot/config_methods.rb#30
  def bots; end

  # Returns config for .bots method. By default uses `telegram['bots']` section
  # from `secrets.yml` merging `telegram['bot']` at `:default` key.
  #
  # Can be overwritten with .bots_config=
  #
  # source://telegram-bot//lib/telegram/bot/config_methods.rb#49
  def bots_config; end

  # Overwrite config.
  #
  # source://telegram-bot//lib/telegram/bot/config_methods.rb#10
  def bots_config=(_arg0); end

  # Resets all cached bots and their configs.
  #
  # source://telegram-bot//lib/telegram/bot/config_methods.rb#67
  def reset_bots; end
end

# source://telegram-bot//lib/telegram/bot/debug_client.rb#5
module Telegram::Bot::DebugClient
  # source://telegram-bot//lib/telegram/bot/debug_client.rb#6
  def debug!(dev = T.unsafe(nil)); end

  # source://telegram-bot//lib/telegram/bot/debug_client.rb#20
  def debug_off!; end
end

# source://telegram-bot//lib/telegram/bot.rb#9
class Telegram::Bot::Error < ::StandardError; end

# Raised for valid telegram response with 403 status code.
#
# source://telegram-bot//lib/telegram/bot.rb#12
class Telegram::Bot::Forbidden < ::Telegram::Bot::Error; end

# source://telegram-bot//lib/telegram/bot/middleware.rb#10
class Telegram::Bot::Middleware
  # @return [Middleware] a new instance of Middleware
  #
  # source://telegram-bot//lib/telegram/bot/middleware.rb#13
  def initialize(bot, controller); end

  # Returns the value of attribute bot.
  #
  # source://telegram-bot//lib/telegram/bot/middleware.rb#11
  def bot; end

  # source://telegram-bot//lib/telegram/bot/middleware.rb#18
  def call(env); end

  # Returns the value of attribute controller.
  #
  # source://telegram-bot//lib/telegram/bot/middleware.rb#11
  def controller; end

  # source://telegram-bot//lib/telegram/bot/middleware.rb#25
  def inspect; end
end

# Raised for valid telegram response with 404 status code.
#
# source://telegram-bot//lib/telegram/bot.rb#15
class Telegram::Bot::NotFound < ::Telegram::Bot::Error; end

# source://telegram-bot//lib/telegram/bot/rspec.rb#5
module Telegram::Bot::RSpec
  private

  # Yelds a block if `include_context` is supported.
  #
  # source://telegram-bot//lib/telegram/bot/rspec.rb#11
  def with_include_context; end

  class << self
    # Yelds a block if `include_context` is supported.
    #
    # source://telegram-bot//lib/telegram/bot/rspec.rb#11
    def with_include_context; end
  end
end

# Proxy that uses RSpec::Mocks::ArgListMatcher when it's available.
# Otherwise just performs `#==` match.
#
# Also allows to check argumets with custom block.
#
# source://telegram-bot//lib/telegram/bot/rspec/client_matchers.rb#10
class Telegram::Bot::RSpec::ArgListMatcher
  # @return [ArgListMatcher] a new instance of ArgListMatcher
  #
  # source://telegram-bot//lib/telegram/bot/rspec/client_matchers.rb#13
  def initialize(*args, &block); end

  # source://telegram-bot//lib/telegram/bot/rspec/client_matchers.rb#34
  def args; end

  # @return [Boolean]
  #
  # source://telegram-bot//lib/telegram/bot/rspec/client_matchers.rb#23
  def args_match?(*actual); end

  # Returns the value of attribute expected.
  #
  # source://telegram-bot//lib/telegram/bot/rspec/client_matchers.rb#11
  def expected; end

  # Returns the value of attribute expected_proc.
  #
  # source://telegram-bot//lib/telegram/bot/rspec/client_matchers.rb#11
  def expected_proc; end

  # @return [Boolean]
  #
  # source://telegram-bot//lib/telegram/bot/rspec/client_matchers.rb#38
  def mocks_matcher?; end

  # source://telegram-bot//lib/telegram/bot/rspec/client_matchers.rb#42
  def to_s; end
end

# source://telegram-bot//lib/telegram/bot/railtie.rb#7
class Telegram::Bot::Railtie < ::Rails::Railtie; end

# source://telegram-bot//lib/telegram/bot/routes_helper.rb#11
module Telegram::Bot::RoutesHelper
  # Define route which processes requests using given controller and bot.
  #
  #   telegram_webhook TelegramController, bot
  #
  #   telegram_webhook TelegramController
  #   # same as:
  #   telegram_webhook TelegramController, :default
  #
  #   # pass additional options
  #   telegram_webhook TelegramController, :default, as: :custom_route_name
  #
  #   # Default path is generated using hashed bot token. Override it using:
  #   telegram_webhook TelegramController, :default, path: 'top/secret'
  #
  # source://telegram-bot//lib/telegram/bot/routes_helper.rb#43
  def telegram_webhook(controller, bot = T.unsafe(nil), path: T.unsafe(nil), **options); end

  class << self
    # Returns route name for given bot. Result depends on `Telegram.bots`.
    # When there is single bot it returns 'telegram_webhook'.
    # When there are it will use bot's key in the `Telegram.bots` as prefix
    # (eg. `chat_telegram_webhook`).
    #
    # source://telegram-bot//lib/telegram/bot/routes_helper.rb#17
    def route_name_for_bot(bot); end

    # source://telegram-bot//lib/telegram/bot/routes_helper.rb#25
    def token_hash(token); end
  end
end

# source://telegram-bot//lib/telegram/bot/tasks.rb#5
module Telegram::Bot::Tasks
  extend ::Telegram::Bot::Tasks

  # source://telegram-bot//lib/telegram/bot/tasks.rb#39
  def close; end

  # source://telegram-bot//lib/telegram/bot/tasks.rb#25
  def delete_webhook; end

  # source://telegram-bot//lib/telegram/bot/tasks.rb#32
  def log_out; end

  # source://telegram-bot//lib/telegram/bot/tasks.rb#8
  def set_webhook; end

  private

  # source://telegram-bot//lib/telegram/bot/tasks.rb#58
  def drop_pending_updates; end

  # source://telegram-bot//lib/telegram/bot/tasks.rb#52
  def each_bot(&block); end

  # source://telegram-bot//lib/telegram/bot/tasks.rb#48
  def say(text); end
end

# Base class to create update processors. With callbacks, session and helpers.
#
# Public methods ending with `!` handle messages with commands.
# Message text is automatically parsed  into method arguments.
# Be sure to use default values and
# splat arguments in every action method to not get errors, when user
# sends command without necessary args / with extra args.
#
#     def start!(token = nil, *)
#       if token
#         # ...
#       else
#         # ...
#       end
#     end
#
#     def help!(*)
#       respond_with :message, text:
#     end
#
# To process plain text messages (without commands) or other updates just
# define public method with name of payload type.
# By default they receive payload as an argument, but some of them are called
# with more usefuk args:
#
#     def message(message)
#       respond_with :message, text: "Echo: #{message['text']}"
#     end
#
#     def inline_query(query, offset)
#       answer_inline_query results_for_query(query, offset), is_personal: true
#     end
#
# To process update run:
#
#     ControllerClass.dispatch(bot, update)
#
# There is also ability to run action without update:
#
#     ControllerClass.new(bot, from: telegram_user, chat: telegram_chat).
#       process(:help, *args)
#
# @abstract It cannot be directly instantiated. Subclasses must implement the `abstract` methods below.
#
# source://telegram-bot//lib/telegram/bot/updates_controller.rb#52
class Telegram::Bot::UpdatesController < ::AbstractController::Base
  include ::ActiveSupport::Callbacks
  include ::AbstractController::Callbacks
  include ::Telegram::Bot::UpdatesController::Commands
  include ::ActiveSupport::Rescuable
  include ::Telegram::Bot::UpdatesController::Rescue
  include ::Telegram::Bot::UpdatesController::ReplyHelpers
  include ::Telegram::Bot::UpdatesController::Translation
  include ::Telegram::Bot::UpdatesController::Instrumentation
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::AbstractController::Callbacks::ClassMethods
  extend ::ActiveSupport::Rescuable::ClassMethods
  extend ::Telegram::Bot::UpdatesController::Translation::ClassMethods
  extend ::Telegram::Bot::UpdatesController::Instrumentation::ClassMethods
  extend ::Telegram::Bot::UpdatesController::Session::ConfigMethods

  # `update` can be either update object with hash access & string
  # keys or Hash with `:from` or `:chat` to override this values and assume
  # that update is nil.
  # ActionDispatch::Request object is passed in `webhook_request` when bot running
  # in webhook mode.
  #
  # @return [UpdatesController] a new instance of UpdatesController
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#141
  def initialize(bot = T.unsafe(nil), update = T.unsafe(nil), webhook_request = T.unsafe(nil)); end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#71
  def __callbacks; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#71
  def _process_action_callbacks; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#71
  def _run_process_action_callbacks(&block); end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#243
  def action_for_business_connection; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#243
  def action_for_business_message; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#226
  def action_for_callback_query; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#243
  def action_for_chat_boost; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#243
  def action_for_chat_join_request; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#243
  def action_for_chat_member; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#222
  def action_for_chosen_inline_result; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#214
  def action_for_default_payload; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#243
  def action_for_deleted_business_messages; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#243
  def action_for_edited_business_message; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#243
  def action_for_edited_channel_post; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#243
  def action_for_edited_message; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#218
  def action_for_inline_query; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#243
  def action_for_message_reaction; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#243
  def action_for_message_reaction_count; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#243
  def action_for_my_chat_member; end

  # Calculates action name and args for payload.
  # Uses `action_for_#{payload_type}` methods.
  # If this method doesn't return anything
  # it uses fallback with action same as payload type.
  # Returns array `[action, args]`.
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#206
  def action_for_payload; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#243
  def action_for_poll; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#230
  def action_for_poll_answer; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#243
  def action_for_pre_checkout_query; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#243
  def action_for_purchased_paid_media; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#243
  def action_for_removed_chat_boost; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#243
  def action_for_shipping_query; end

  # Silently ignore unsupported messages to not fail when user crafts
  # an update with usupported command, callback query context, etc.
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#236
  def action_missing(action, *_args); end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#181
  def action_options; end

  # There are multiple ways how action name is calculated for update
  # (see Commands, MessageContext, etc.). This method represents the
  # way how action was calculated for current udpate.
  #
  # Some of possible values are `:payload, :command, :message_context`.
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#197
  def action_type; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#133
  def bot; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#134
  def bot_username(*_arg0, **_arg1, &_arg2); end

  # Accessor to `'chat'` field of payload. Also tries `'chat'` in `'message'`
  # when there is no such field in payload.
  #
  # Can be overriden with `chat` option for #initialize.
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#157
  def chat; end

  # Processes current update.
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#176
  def dispatch; end

  # Accessor to `'from'` field of payload. Can be overriden with `from` option
  # for #initialize.
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#170
  def from; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#88
  def logger; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#88
  def logger=(value); end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#133
  def payload; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#133
  def payload_type; end

  # It provides support for passing array as action, where first vaule
  # is action name and second is action metadata.
  # This metadata is stored inside action_options
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#186
  def process(action, *args); end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#71
  def raise_on_missing_callback_actions; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#71
  def raise_on_missing_callback_actions=(val); end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#83
  def rescue_handlers; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#83
  def rescue_handlers=(_arg0); end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#83
  def rescue_handlers?; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#133
  def update; end

  # source://telegram-bot//lib/telegram/bot/updates_controller.rb#133
  def webhook_request; end

  class << self
    # source://telegram-bot//lib/telegram/bot/updates_controller.rb#71
    def __callbacks; end

    # source://telegram-bot//lib/telegram/bot/updates_controller.rb#71
    def __callbacks=(value); end

    # source://telegram-bot//lib/telegram/bot/updates_controller.rb#71
    def _process_action_callbacks; end

    # source://telegram-bot//lib/telegram/bot/updates_controller.rb#71
    def _process_action_callbacks=(value); end

    # Initialize controller and process update.
    #
    # source://telegram-bot//lib/telegram/bot/updates_controller.rb#102
    def dispatch(*args); end

    # source://telegram-bot//lib/telegram/bot/updates_controller.rb#88
    def logger; end

    # source://telegram-bot//lib/telegram/bot/updates_controller.rb#88
    def logger=(value); end

    # source://telegram-bot//lib/telegram/bot/updates_controller.rb#106
    def payload_from_update(update); end

    # source://telegram-bot//lib/telegram/bot/updates_controller.rb#71
    def raise_on_missing_callback_actions; end

    # source://telegram-bot//lib/telegram/bot/updates_controller.rb#71
    def raise_on_missing_callback_actions=(val); end

    # source://telegram-bot//lib/telegram/bot/updates_controller.rb#83
    def rescue_handlers; end

    # source://telegram-bot//lib/telegram/bot/updates_controller.rb#83
    def rescue_handlers=(value); end

    # source://telegram-bot//lib/telegram/bot/updates_controller.rb#83
    def rescue_handlers?; end

    private

    # source://telegram-bot//lib/telegram/bot/updates_controller.rb#71
    def __class_attr___callbacks; end

    # source://telegram-bot//lib/telegram/bot/updates_controller.rb#71
    def __class_attr___callbacks=(new_value); end

    # source://telegram-bot//lib/telegram/bot/updates_controller.rb#83
    def __class_attr_rescue_handlers; end

    # source://telegram-bot//lib/telegram/bot/updates_controller.rb#83
    def __class_attr_rescue_handlers=(new_value); end

    # source://telegram-bot//lib/telegram/bot/updates_controller.rb#121
    def payload_from_typed_update(update); end
  end
end

# Use separate actions for different callback queries.
# It doesn't require session support. Simply add `%{context}:` prefix to data.
#
# source://telegram-bot//lib/telegram/bot/updates_controller/callback_query_context.rb#8
module Telegram::Bot::UpdatesController::CallbackQueryContext
  protected

  # Uses #context_from_callback_query as context name.
  # If context is present checks if `%context%_callback_query` is valid
  # action method and returns it if so. Context is stripped from data
  # in this case. Otherwise returns `super`.
  #
  # It wont raise ActionNotFound as MessageContext does,
  # because `data` param is controlled by client.
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/callback_query_context.rb#18
  def action_for_callback_query; end

  # source://telegram-bot//lib/telegram/bot/updates_controller/callback_query_context.rb#30
  def context_from_callback_query; end
end

# Support for parsing commands
#
# source://telegram-bot//lib/telegram/bot/updates_controller/commands.rb#7
module Telegram::Bot::UpdatesController::Commands
  # If payload is a message with command, then returned action is an
  # action for this command.
  # Separate method, so it can be easily overriden (ex. MessageContext).
  #
  # This is not used for edited messages/posts. It process them as basic updates.
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/commands.rb#42
  def action_for_channel_post; end

  # Override it to filter or transform commands.
  # Default implementation is to downcase and add `!` suffix.
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/commands.rb#27
  def action_for_command(cmd); end

  # If payload is a message with command, then returned action is an
  # action for this command.
  # Separate method, so it can be easily overriden (ex. MessageContext).
  #
  # This is not used for edited messages/posts. It process them as basic updates.
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/commands.rb#36
  def action_for_message; end

  class << self
    # Fetches command from text message. All subsequent words are returned
    # as arguments.
    # If command has mention (eg. `/test@SomeBot`), it returns commands only
    # for specified username. Set `username` to `true` to accept
    # any commands.
    #
    # source://telegram-bot//lib/telegram/bot/updates_controller/commands.rb#16
    def command_from_text(text, username = T.unsafe(nil)); end
  end
end

# source://telegram-bot//lib/telegram/bot/updates_controller/commands.rb#8
Telegram::Bot::UpdatesController::Commands::CMD_REGEX = T.let(T.unsafe(nil), Regexp)

# Most methods are taken from ActionController::Instrumentation,
# some are slightly modified.
#
# source://telegram-bot//lib/telegram/bot/updates_controller/instrumentation.rb#8
module Telegram::Bot::UpdatesController::Instrumentation
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Telegram::Bot::UpdatesController::Instrumentation::ClassMethods

  # source://telegram-bot//lib/telegram/bot/updates_controller/instrumentation.rb#46
  def answer_callback_query(*args); end

  # source://telegram-bot//lib/telegram/bot/updates_controller/instrumentation.rb#46
  def answer_inline_query(*args); end

  # source://telegram-bot//lib/telegram/bot/updates_controller/instrumentation.rb#25
  def process_action(*args); end

  # source://telegram-bot//lib/telegram/bot/updates_controller/instrumentation.rb#41
  def respond_with(type, *_arg1); end

  private

  # Every time after an action is processed, this method is invoked
  # with the payload, so you can add more information.
  # :api: plugin
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/instrumentation.rb#73
  def append_info_to_payload(_payload); end

  # A hook which allows you to clean up any time taken into account in
  # views wrongly, like database querying time.
  #
  #   def cleanup_view_runtime
  #     super - time_taken_in_something_expensive
  #   end
  #
  # :api: plugin
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/instrumentation.rb#66
  def cleanup_view_runtime; end

  # A hook invoked every time a before callback is halted.
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/instrumentation.rb#54
  def halted_callback_hook(filter, *_arg1); end

  class << self
    # source://telegram-bot//lib/telegram/bot/updates_controller/instrumentation.rb#16
    def instrument(action, *args, &block); end
  end
end

# source://telegram-bot//lib/telegram/bot/updates_controller/instrumentation.rb#76
module Telegram::Bot::UpdatesController::Instrumentation::ClassMethods
  # A hook which allows other frameworks to log what happened during
  # controller process action. This method should return an array
  # with the messages to be added.
  # :api: plugin
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/instrumentation.rb#81
  def log_process_action(_payload); end
end

# source://telegram-bot//lib/telegram/bot/updates_controller/log_subscriber.rb#8
class Telegram::Bot::UpdatesController::LogSubscriber < ::ActiveSupport::LogSubscriber
  # source://telegram-bot//lib/telegram/bot/updates_controller/log_subscriber.rb#31
  def halted_callback(event); end

  # source://telegram-bot//lib/telegram/bot/updates_controller/log_subscriber.rb#35
  def logger(*_arg0, **_arg1, &_arg2); end

  # source://telegram-bot//lib/telegram/bot/updates_controller/log_subscriber.rb#17
  def process_action(event); end

  # source://telegram-bot//lib/telegram/bot/updates_controller/log_subscriber.rb#27
  def respond_with(event); end

  # source://telegram-bot//lib/telegram/bot/updates_controller/log_subscriber.rb#9
  def start_processing(event); end
end

# Allows to store context in session and treat next message according to this context.
#
# It provides `save_context` method to store method name
# to be used as action for next update:
#
#     def set_location!(*)
#       save_context(:set_location_from_message)
#       respond_with :message, text: 'Where are you?'
#     end
#
#     def set_location_from_message(city = nil, *)
#       # update
#     end
#
#     # OR
#     # This will support both `/set_location city_name`, and `/set_location`
#     # with subsequent refinement.
#     def set_location!(city = nil, *)
#       if city
#         # update
#       else
#         save_context(:set_location!)
#         respond_with :message, text: 'Where are you?'
#       end
#     end
#
# source://telegram-bot//lib/telegram/bot/updates_controller/message_context.rb#31
module Telegram::Bot::UpdatesController::MessageContext
  extend ::ActiveSupport::Concern
  include ::Telegram::Bot::UpdatesController::Session

  mixes_in_class_methods ::Telegram::Bot::UpdatesController::Session::ClassMethods

  # Action to clear context.
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/message_context.rb#37
  def cancel!; end

  private

  # Fetches context and finds handler for it. If message has new command,
  # it has higher priority than contextual action.
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/message_context.rb#51
  def action_for_message; end

  # Returns action name for message context. By default it's the same as context name.
  # Raises AbstractController::ActionNotFound if action is not available.
  # This differs from other cases where invalid actions are silently ignored,
  # because message context is controlled by developer, and users are not able
  # to construct update to run any specific context.
  #
  # @raise [AbstractController::ActionNotFound]
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/message_context.rb#71
  def action_for_message_context(context); end

  # Controller may have multiple sessions, let it be possible
  # to select session for message context.
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/message_context.rb#45
  def message_context_session; end

  # Save context for the next request.
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/message_context.rb#62
  def save_context(context); end
end

# source://telegram-bot//lib/telegram/bot/updates_controller.rb#93
Telegram::Bot::UpdatesController::PAYLOAD_TYPES = T.let(T.unsafe(nil), Set)

# source://telegram-bot//lib/telegram/bot/updates_controller.rb#92
Telegram::Bot::UpdatesController::PAYLOAD_TYPES_FILE = T.let(T.unsafe(nil), String)

# source://telegram-bot//lib/telegram/bot/updates_controller/reply_helpers.rb#6
module Telegram::Bot::UpdatesController::ReplyHelpers
  # Same as respond_with, but for callback queries.
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/reply_helpers.rb#36
  def answer_callback_query(text, params = T.unsafe(nil)); end

  # Same as respond_with, but for inline queries.
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/reply_helpers.rb#27
  def answer_inline_query(results, params = T.unsafe(nil)); end

  # Same as respond_with, but for pre checkout queries.
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/reply_helpers.rb#45
  def answer_pre_checkout_query(ok, params = T.unsafe(nil)); end

  # source://telegram-bot//lib/telegram/bot/updates_controller/reply_helpers.rb#53
  def answer_shipping_query(ok, params = T.unsafe(nil)); end

  # Edit message from callback query.
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/reply_helpers.rb#62
  def edit_message(type, params = T.unsafe(nil)); end

  # Same as respond_with but also sets `reply_to_message_id`.
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/reply_helpers.rb#19
  def reply_with(type, params); end

  # Helper to call bot's `send_#{type}` method with already set `chat_id`:
  #
  #     respond_with :message, text: 'Hello!'
  #     respond_with :message, text: '__Hello!__', parse_mode: :Markdown
  #     respond_with :photo, photo: File.open(photo_to_send), caption: "It's incredible!"
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/reply_helpers.rb#12
  def respond_with(type, params); end
end

# source://telegram-bot//lib/telegram/bot/updates_controller/rescue.rb#8
module Telegram::Bot::UpdatesController::Rescue
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Rescuable

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Rescuable::ClassMethods

  private

  # source://telegram-bot//lib/telegram/bot/updates_controller/rescue.rb#14
  def process_action(*_arg0); end

  module GeneratedClassMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end

  module GeneratedInstanceMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end
end

# Add functionality to store data between requests.
#
# source://telegram-bot//lib/telegram/bot/updates_controller/session.rb#10
module Telegram::Bot::UpdatesController::Session
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Telegram::Bot::UpdatesController::Session::ClassMethods

  # source://telegram-bot//lib/telegram/bot/updates_controller/session.rb#23
  def process_action(*_arg0); end

  protected

  # source://telegram-bot//lib/telegram/bot/updates_controller/session.rb#31
  def session; end

  # source://telegram-bot//lib/telegram/bot/updates_controller/session.rb#36
  def session_key; end
end

# source://telegram-bot//lib/telegram/bot/updates_controller/session.rb#13
module Telegram::Bot::UpdatesController::Session::ClassMethods
  # Builds session with given key and optional store (default to session_store).
  # This way it's easier to define multiple custom sessions,
  # ex. one for group chat and one for user.
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/session.rb#17
  def build_session(key, store = T.unsafe(nil)); end
end

# source://telegram-bot//lib/telegram/bot/updates_controller/session.rb#88
module Telegram::Bot::UpdatesController::Session::ConfigMethods
  # source://telegram-bot//lib/telegram/bot/updates_controller/session.rb#89
  def session_store(*_arg0, **_arg1, &_arg2); end

  # source://telegram-bot//lib/telegram/bot/updates_controller/session.rb#91
  def session_store=(store); end

  # source://telegram-bot//lib/telegram/bot/updates_controller/session.rb#95
  def use_session!; end
end

# source://telegram-bot//lib/telegram/bot/updates_controller/session.rb#76
class Telegram::Bot::UpdatesController::Session::NullSessionHash < ::Telegram::Bot::UpdatesController::Session::SessionHash
  # @return [NullSessionHash] a new instance of NullSessionHash
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/session.rb#77
  def initialize; end

  # source://telegram-bot//lib/telegram/bot/updates_controller/session.rb#85
  def commit; end

  # source://telegram-bot//lib/telegram/bot/updates_controller/session.rb#83
  def destroy; end

  # source://telegram-bot//lib/telegram/bot/updates_controller/session.rb#84
  def load!; end
end

# Rack::Session::Abstract::SessionHash is taken to provide lazy loading.
# All methods that access store are overriden to support
# ActiveSupport::Cache::Store stores.
#
# source://telegram-bot//lib/telegram/bot/updates_controller/session.rb#44
class Telegram::Bot::UpdatesController::Session::SessionHash < ::Rack::Session::Abstract::SessionHash
  # @return [SessionHash] a new instance of SessionHash
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/session.rb#47
  def initialize(store, id); end

  # source://telegram-bot//lib/telegram/bot/updates_controller/session.rb#69
  def commit; end

  # source://telegram-bot//lib/telegram/bot/updates_controller/session.rb#52
  def destroy; end

  # @return [Boolean]
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/session.rb#57
  def exists?; end

  # Returns the value of attribute id.
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/session.rb#45
  def id; end

  # source://telegram-bot//lib/telegram/bot/updates_controller/session.rb#63
  def load!; end
end

# Provides helpers similar to AbstractController::Translation
# but by default uses `action_name_i18n_key` in lazy translation keys
# which strips `!` from action names by default. This makes translating
# strings for commands more convenient.
#
# To disable this behaviour use `alias_method :action_name_i18n_key, :action_name`.
#
# source://telegram-bot//lib/telegram/bot/updates_controller/translation.rb#12
module Telegram::Bot::UpdatesController::Translation
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Telegram::Bot::UpdatesController::Translation::ClassMethods

  # Strips trailing `!` from action_name.
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/translation.rb#38
  def action_name_i18n_key; end

  # source://telegram-bot//lib/telegram/bot/updates_controller/translation.rb#45
  def l(*args); end

  # source://telegram-bot//lib/telegram/bot/updates_controller/translation.rb#42
  def localize(*args); end

  # See toplevel description.
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/translation.rb#35
  def t(key, **options); end

  # See toplevel description.
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/translation.rb#25
  def translate(key, **options); end
end

# source://telegram-bot//lib/telegram/bot/updates_controller/translation.rb#15
module Telegram::Bot::UpdatesController::Translation::ClassMethods
  # Class-level helper for lazy translations.
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/translation.rb#21
  def t(key, **options); end

  # Class-level helper for lazy translations.
  #
  # source://telegram-bot//lib/telegram/bot/updates_controller/translation.rb#17
  def translate(key, **options); end
end

# Include this module to type cast update to Virtus model
# using `telegram-bot-types` gem (install this gem first).
#
# source://telegram-bot//lib/telegram/bot/updates_controller/typed_update.rb#8
module Telegram::Bot::UpdatesController::TypedUpdate
  # source://telegram-bot//lib/telegram/bot/updates_controller/typed_update.rb#9
  def initialize(bot = T.unsafe(nil), update = T.unsafe(nil), webhook_request = T.unsafe(nil)); end
end

# Supposed to be used in development environments only.
#
# source://telegram-bot//lib/telegram/bot/updates_poller.rb#6
class Telegram::Bot::UpdatesPoller
  # @return [UpdatesPoller] a new instance of UpdatesPoller
  #
  # source://telegram-bot//lib/telegram/bot/updates_poller.rb#31
  def initialize(bot, controller, **options); end

  # Returns the value of attribute bot.
  #
  # source://telegram-bot//lib/telegram/bot/updates_poller.rb#29
  def bot; end

  # Returns the value of attribute controller.
  #
  # source://telegram-bot//lib/telegram/bot/updates_poller.rb#29
  def controller; end

  # source://telegram-bot//lib/telegram/bot/updates_poller.rb#72
  def fetch_updates(offset = T.unsafe(nil)); end

  # source://telegram-bot//lib/telegram/bot/updates_poller.rb#40
  def log(&block); end

  # Returns the value of attribute logger.
  #
  # source://telegram-bot//lib/telegram/bot/updates_poller.rb#29
  def logger; end

  # Returns the value of attribute offset.
  #
  # source://telegram-bot//lib/telegram/bot/updates_poller.rb#29
  def offset; end

  # Override this method to setup custom error collector.
  #
  # source://telegram-bot//lib/telegram/bot/updates_poller.rb#92
  def process_update(update); end

  # source://telegram-bot//lib/telegram/bot/updates_poller.rb#80
  def process_updates(updates); end

  # Returns the value of attribute reload.
  #
  # source://telegram-bot//lib/telegram/bot/updates_poller.rb#29
  def reload; end

  # source://telegram-bot//lib/telegram/bot/updates_poller.rb#96
  def reload!; end

  # source://telegram-bot//lib/telegram/bot/updates_poller.rb#107
  def reloading_code(&block); end

  # source://telegram-bot//lib/telegram/bot/updates_poller.rb#58
  def run; end

  # Returns the value of attribute running.
  #
  # source://telegram-bot//lib/telegram/bot/updates_poller.rb#29
  def running; end

  # source://telegram-bot//lib/telegram/bot/updates_poller.rb#44
  def start; end

  # Method to stop poller from other thread.
  #
  # source://telegram-bot//lib/telegram/bot/updates_poller.rb#66
  def stop; end

  # Returns the value of attribute timeout.
  #
  # source://telegram-bot//lib/telegram/bot/updates_poller.rb#29
  def timeout; end

  class << self
    # Create, start and add poller instnace to tracked instances list.
    #
    # source://telegram-bot//lib/telegram/bot/updates_poller.rb#15
    def add(bot, controller); end

    # source://telegram-bot//lib/telegram/bot/updates_poller.rb#10
    def instances; end

    # source://telegram-bot//lib/telegram/bot/updates_poller.rb#19
    def start(bot_id, controller = T.unsafe(nil)); end
  end
end

# source://telegram-bot//lib/telegram/bot/updates_poller.rb#27
Telegram::Bot::UpdatesPoller::DEFAULT_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://telegram-bot//lib/telegram/bot/version.rb#5
Telegram::Bot::VERSION = T.let(T.unsafe(nil), String)
